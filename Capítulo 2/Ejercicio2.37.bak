#lang racket

;(define (map proc items)
;  (if (null? items)
;      nil
;      (cons (proc (car items))
;            (map proc (cdr items)))))

; Footnote 78
;Scheme standardly provides a map procedure that is more general than the one described here. This more general map takes a procedure of n
;arguments, together with n lists, and applies the procedure to all the first elements of the lists, all the second elements of the lists,
;and so on, returning a list of the results. For example:
;
;(map + 
;     (list 1 2 3) 
;     (list 40 50 60) 
;     (list 700 800 900))
;(741 852 963)
;
;(map (lambda (x y) (+ x (* 2 y)))
;     (list 1 2 3)
;     (list 4 5 6))
;(9 12 15)

(define (dot-product v w) ; This definition uses the extended version of map described in Footnote 78.
  (accumulate + 0 (map * v w)))

; This is a matrix ((1 2 3 4) (4 5 6 6) (6 7 8 9))
(define (matrix-*-vector m v)
  (map ⟨??⟩ m))