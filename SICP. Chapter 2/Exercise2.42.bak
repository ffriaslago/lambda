#lang racket

;
; Auxiliary procedures
;

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence) (accumulate op initial (cdr sequence)))))

(define (enumerate-interval low high)
  (if (> low high)
      empty
      (cons low (enumerate-interval (+ low 1) high))))

(define (filter predicate sequence)
  (cond ((null? sequence) empty)
        ((predicate (car sequence)) (cons (car sequence) (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

(define (flatmap proc seq)
  (accumulate append empty (map proc seq)))

;
; Intermediate versions and instructions needed to understand the exercise
;

; Attemps with safe? always true to understand the intermediate output inside queens
;(define (safe? k positions) #t)

;(define (queen-cols k)
;  (if (= k 0)      
;      (list empty) 
;      (filter
;       (lambda (positions) (safe? k positions))                 
;       (flatmap (lambda (rest-of-queens)  
;                  (map (lambda (new-row) (adjoin-position new-row k rest-of-queens))
;                       (enumerate-interval 1 4)))                         
;                (queen-cols (- k 1))))))
    
;(queen-cols 0) ; '(())

;(queen-cols 1) ; '(((1 1)) ((2 1)) ((3 1)) ((4 1)))

;(queen-cols 2)  ;'(((1 2) (1 1)) ((2 2) (1 1)) ((3 2) (1 1)) ((4 2) (1 1))
;                ((1 2) (2 1)) ((2 2) (2 1)) ((3 2) (2 1)) ((4 2) (2 1))
;                ((1 2) (3 1)) ((2 2) (3 1)) ((3 2) (3 1)) ((4 2) (3 1))
;                ((1 2) (4 1)) ((2 2) (4 1)) ((3 2) (4 1)) ((4 2) (4 1)))


;(queens 1)

;'(((1 1)))

;(queens 2)

;'(((1 2) (1 1))
;  ((2 2) (1 1))
;  ((1 2) (2 1))
;  ((2 2) (2 1)))

;(queens 3)

;'(((1 3) (1 2) (1 1))
;  ((2 3) (1 2) (1 1))
;  ((3 3) (1 2) (1 1))
;  ((1 3) (2 2) (1 1))
;  ((2 3) (2 2) (1 1))
;  ((3 3) (2 2) (1 1))
;  ((1 3) (3 2) (1 1))
;  ((2 3) (3 2) (1 1))
;  ((3 3) (3 2) (1 1))
;  ((1 3) (1 2) (2 1))
;  ((2 3) (1 2) (2 1))
;  ((3 3) (1 2) (2 1))
;  ((1 3) (2 2) (2 1))
;  ((2 3) (2 2) (2 1))
;  ((3 3) (2 2) (2 1))
;  ((1 3) (3 2) (2 1))
;  ((2 3) (3 2) (2 1))
;  ((3 3) (3 2) (2 1))
;  ((1 3) (1 2) (3 1))
;  ((2 3) (1 2) (3 1))
;  ((3 3) (1 2) (3 1))
;  ((1 3) (2 2) (3 1))
;  ((2 3) (2 2) (3 1))
;  ((3 3) (2 2) (3 1))
;  ((1 3) (3 2) (3 1))
;  ((2 3) (3 2) (3 1))
;  ((3 3) (3 2) (3 1)))

;(queens 4)

;'(((1 4) (1 3) (1 2) (1 1))
;  ((2 4) (1 3) (1 2) (1 1))
;  ((3 4) (1 3) (1 2) (1 1))
;  ((4 4) (1 3) (1 2) (1 1))
;  ((1 4) (2 3) (1 2) (1 1))
;  ((2 4) (2 3) (1 2) (1 1))
;  ((3 4) (2 3) (1 2) (1 1))
;  ((4 4) (2 3) (1 2) (1 1))
;  ((1 4) (3 3) (1 2) (1 1))
;  ((2 4) (3 3) (1 2) (1 1))
;  ((3 4) (3 3) (1 2) (1 1))
;  ((4 4) (3 3) (1 2) (1 1))
;  ((1 4) (4 3) (1 2) (1 1))
;  ((2 4) (4 3) (1 2) (1 1))
;  ((3 4) (4 3) (1 2) (1 1))
;  ((4 4) (4 3) (1 2) (1 1))
;  ((1 4) (1 3) (2 2) (1 1))
;  ((2 4) (1 3) (2 2) (1 1))
;  ((3 4) (1 3) (2 2) (1 1))
;  ((4 4) (1 3) (2 2) (1 1))
;  ((1 4) (2 3) (2 2) (1 1))
;  ((2 4) (2 3) (2 2) (1 1))
;  ((3 4) (2 3) (2 2) (1 1))
;  ((4 4) (2 3) (2 2) (1 1))
;  ((1 4) (3 3) (2 2) (1 1))
;  ((2 4) (3 3) (2 2) (1 1))
;  ((3 4) (3 3) (2 2) (1 1))
;  ((4 4) (3 3) (2 2) (1 1))
;  ((1 4) (4 3) (2 2) (1 1))
;  ((2 4) (4 3) (2 2) (1 1))
;  ((3 4) (4 3) (2 2) (1 1))
;  ((4 4) (4 3) (2 2) (1 1))
;  ((1 4) (1 3) (3 2) (1 1))
;  ((2 4) (1 3) (3 2) (1 1))
;  ((3 4) (1 3) (3 2) (1 1))
;  ((4 4) (1 3) (3 2) (1 1))
;  ((1 4) (2 3) (3 2) (1 1))
;  ((2 4) (2 3) (3 2) (1 1))
;  ((3 4) (2 3) (3 2) (1 1))
;  ((4 4) (2 3) (3 2) (1 1))
;  ((1 4) (3 3) (3 2) (1 1))
;  ((2 4) (3 3) (3 2) (1 1))
;  ((3 4) (3 3) (3 2) (1 1))
;  ((4 4) (3 3) (3 2) (1 1))
;  ((1 4) (4 3) (3 2) (1 1))
;  ((2 4) (4 3) (3 2) (1 1))
;  ((3 4) (4 3) (3 2) (1 1))
;  ((4 4) (4 3) (3 2) (1 1))
;  ((1 4) (1 3) (4 2) (1 1))
;  ((2 4) (1 3) (4 2) (1 1))
;  ((3 4) (1 3) (4 2) (1 1))
;  ((4 4) (1 3) (4 2) (1 1))
;  ((1 4) (2 3) (4 2) (1 1))
;  ((2 4) (2 3) (4 2) (1 1))
;  ((3 4) (2 3) (4 2) (1 1))
;  ((4 4) (2 3) (4 2) (1 1))
;  ((1 4) (3 3) (4 2) (1 1))
;  ((2 4) (3 3) (4 2) (1 1))
;  ((3 4) (3 3) (4 2) (1 1))
;  ((4 4) (3 3) (4 2) (1 1))
;  ((1 4) (4 3) (4 2) (1 1))
;  ((2 4) (4 3) (4 2) (1 1))
;  ((3 4) (4 3) (4 2) (1 1))
;  ((4 4) (4 3) (4 2) (1 1))
;  ((1 4) (1 3) (1 2) (2 1))
;  ((2 4) (1 3) (1 2) (2 1))
;  ((3 4) (1 3) (1 2) (2 1))
;  ((4 4) (1 3) (1 2) (2 1))
;  ((1 4) (2 3) (1 2) (2 1))
;  ((2 4) (2 3) (1 2) (2 1))
;  ((3 4) (2 3) (1 2) (2 1))
;  ((4 4) (2 3) (1 2) (2 1))
;  ((1 4) (3 3) (1 2) (2 1))
;  ((2 4) (3 3) (1 2) (2 1))
;  ((3 4) (3 3) (1 2) (2 1))
;  ((4 4) (3 3) (1 2) (2 1))
;  ((1 4) (4 3) (1 2) (2 1))
;  ((2 4) (4 3) (1 2) (2 1))
;  ((3 4) (4 3) (1 2) (2 1))
;  ((4 4) (4 3) (1 2) (2 1))
;  ((1 4) (1 3) (2 2) (2 1))
;  ((2 4) (1 3) (2 2) (2 1))
;  ((3 4) (1 3) (2 2) (2 1))
;  ((4 4) (1 3) (2 2) (2 1))
;  ((1 4) (2 3) (2 2) (2 1))
;  ((2 4) (2 3) (2 2) (2 1))
;  ((3 4) (2 3) (2 2) (2 1))
;  ((4 4) (2 3) (2 2) (2 1))
;  ((1 4) (3 3) (2 2) (2 1))
;  ((2 4) (3 3) (2 2) (2 1))
;  ((3 4) (3 3) (2 2) (2 1))
;  ((4 4) (3 3) (2 2) (2 1))
;  ((1 4) (4 3) (2 2) (2 1))
;  ((2 4) (4 3) (2 2) (2 1))
;  ((3 4) (4 3) (2 2) (2 1))
;  ((4 4) (4 3) (2 2) (2 1))
;  ((1 4) (1 3) (3 2) (2 1))
;  ((2 4) (1 3) (3 2) (2 1))
;  ((3 4) (1 3) (3 2) (2 1))
;  ((4 4) (1 3) (3 2) (2 1))
;  ((1 4) (2 3) (3 2) (2 1))
;  ((2 4) (2 3) (3 2) (2 1))
;  ((3 4) (2 3) (3 2) (2 1))
;  ((4 4) (2 3) (3 2) (2 1))
;  ((1 4) (3 3) (3 2) (2 1))
;  ((2 4) (3 3) (3 2) (2 1))
;  ((3 4) (3 3) (3 2) (2 1))
;  ((4 4) (3 3) (3 2) (2 1))
;  ((1 4) (4 3) (3 2) (2 1))
;  ((2 4) (4 3) (3 2) (2 1))
;  ((3 4) (4 3) (3 2) (2 1))
;  ((4 4) (4 3) (3 2) (2 1))
;  ((1 4) (1 3) (4 2) (2 1))
;  ((2 4) (1 3) (4 2) (2 1))
;  ((3 4) (1 3) (4 2) (2 1))
;  ((4 4) (1 3) (4 2) (2 1))
;  ((1 4) (2 3) (4 2) (2 1))
;  ((2 4) (2 3) (4 2) (2 1))
;  ((3 4) (2 3) (4 2) (2 1))
;  ((4 4) (2 3) (4 2) (2 1))
;  ((1 4) (3 3) (4 2) (2 1))
;  ((2 4) (3 3) (4 2) (2 1))
;  ((3 4) (3 3) (4 2) (2 1))
;  ((4 4) (3 3) (4 2) (2 1))
;  ((1 4) (4 3) (4 2) (2 1))
;  ((2 4) (4 3) (4 2) (2 1))
;  ((3 4) (4 3) (4 2) (2 1))
;  ((4 4) (4 3) (4 2) (2 1))
;  ((1 4) (1 3) (1 2) (3 1))
;  ((2 4) (1 3) (1 2) (3 1))
;  ((3 4) (1 3) (1 2) (3 1))
;  ((4 4) (1 3) (1 2) (3 1))
;  ((1 4) (2 3) (1 2) (3 1))
;  ((2 4) (2 3) (1 2) (3 1))
;  ((3 4) (2 3) (1 2) (3 1))
;  ((4 4) (2 3) (1 2) (3 1))
;  ((1 4) (3 3) (1 2) (3 1))
;  ((2 4) (3 3) (1 2) (3 1))
;  ((3 4) (3 3) (1 2) (3 1))
;  ((4 4) (3 3) (1 2) (3 1))
;  ((1 4) (4 3) (1 2) (3 1))
;  ((2 4) (4 3) (1 2) (3 1))
;  ((3 4) (4 3) (1 2) (3 1))
;  ((4 4) (4 3) (1 2) (3 1))
;  ((1 4) (1 3) (2 2) (3 1))
;  ((2 4) (1 3) (2 2) (3 1))
;  ((3 4) (1 3) (2 2) (3 1))
;  ((4 4) (1 3) (2 2) (3 1))
;  ((1 4) (2 3) (2 2) (3 1))
;  ((2 4) (2 3) (2 2) (3 1))
;  ((3 4) (2 3) (2 2) (3 1))
;  ((4 4) (2 3) (2 2) (3 1))
;  ((1 4) (3 3) (2 2) (3 1))
;  ((2 4) (3 3) (2 2) (3 1))
;  ((3 4) (3 3) (2 2) (3 1))
;  ((4 4) (3 3) (2 2) (3 1))
;  ((1 4) (4 3) (2 2) (3 1))
;  ((2 4) (4 3) (2 2) (3 1))
;  ((3 4) (4 3) (2 2) (3 1))
;  ((4 4) (4 3) (2 2) (3 1))
;  ((1 4) (1 3) (3 2) (3 1))
;  ((2 4) (1 3) (3 2) (3 1))
;  ((3 4) (1 3) (3 2) (3 1))
;  ((4 4) (1 3) (3 2) (3 1))
;  ((1 4) (2 3) (3 2) (3 1))
;  ((2 4) (2 3) (3 2) (3 1))
;  ((3 4) (2 3) (3 2) (3 1))
;  ((4 4) (2 3) (3 2) (3 1))
;  ((1 4) (3 3) (3 2) (3 1))
;  ((2 4) (3 3) (3 2) (3 1))
;  ((3 4) (3 3) (3 2) (3 1))
;  ((4 4) (3 3) (3 2) (3 1))
;  ((1 4) (4 3) (3 2) (3 1))
;  ((2 4) (4 3) (3 2) (3 1))
;  ((3 4) (4 3) (3 2) (3 1))
;  ((4 4) (4 3) (3 2) (3 1))
;  ((1 4) (1 3) (4 2) (3 1))
;  ((2 4) (1 3) (4 2) (3 1))
;  ((3 4) (1 3) (4 2) (3 1))
;  ((4 4) (1 3) (4 2) (3 1))
;  ((1 4) (2 3) (4 2) (3 1))
;  ((2 4) (2 3) (4 2) (3 1))
;  ((3 4) (2 3) (4 2) (3 1))
;  ((4 4) (2 3) (4 2) (3 1))
;  ((1 4) (3 3) (4 2) (3 1))
;  ((2 4) (3 3) (4 2) (3 1))
;  ((3 4) (3 3) (4 2) (3 1))
;  ((4 4) (3 3) (4 2) (3 1))
;  ((1 4) (4 3) (4 2) (3 1))
;  ((2 4) (4 3) (4 2) (3 1))
;  ((3 4) (4 3) (4 2) (3 1))
;  ((4 4) (4 3) (4 2) (3 1))
;  ((1 4) (1 3) (1 2) (4 1))
;  ((2 4) (1 3) (1 2) (4 1))
;  ((3 4) (1 3) (1 2) (4 1))
;  ((4 4) (1 3) (1 2) (4 1))
;  ((1 4) (2 3) (1 2) (4 1))
;  ((2 4) (2 3) (1 2) (4 1))
;  ((3 4) (2 3) (1 2) (4 1))
;  ((4 4) (2 3) (1 2) (4 1))
;  ((1 4) (3 3) (1 2) (4 1))
;  ((2 4) (3 3) (1 2) (4 1))
;  ((3 4) (3 3) (1 2) (4 1))
;  ((4 4) (3 3) (1 2) (4 1))
;  ((1 4) (4 3) (1 2) (4 1))
;  ((2 4) (4 3) (1 2) (4 1))
;  ((3 4) (4 3) (1 2) (4 1))
;  ((4 4) (4 3) (1 2) (4 1))
;  ((1 4) (1 3) (2 2) (4 1))
;  ((2 4) (1 3) (2 2) (4 1))
;  ((3 4) (1 3) (2 2) (4 1))
;  ((4 4) (1 3) (2 2) (4 1))
;  ((1 4) (2 3) (2 2) (4 1))
;  ((2 4) (2 3) (2 2) (4 1))
;  ((3 4) (2 3) (2 2) (4 1))
;  ((4 4) (2 3) (2 2) (4 1))
;  ((1 4) (3 3) (2 2) (4 1))
;  ((2 4) (3 3) (2 2) (4 1))
;  ((3 4) (3 3) (2 2) (4 1))
;  ((4 4) (3 3) (2 2) (4 1))
;  ((1 4) (4 3) (2 2) (4 1))
;  ((2 4) (4 3) (2 2) (4 1))
;  ((3 4) (4 3) (2 2) (4 1))
;  ((4 4) (4 3) (2 2) (4 1))
;  ((1 4) (1 3) (3 2) (4 1))
;  ((2 4) (1 3) (3 2) (4 1))
;  ((3 4) (1 3) (3 2) (4 1))
;  ((4 4) (1 3) (3 2) (4 1))
;  ((1 4) (2 3) (3 2) (4 1))
;  ((2 4) (2 3) (3 2) (4 1))
;  ((3 4) (2 3) (3 2) (4 1))
;  ((4 4) (2 3) (3 2) (4 1))
;  ((1 4) (3 3) (3 2) (4 1))
;  ((2 4) (3 3) (3 2) (4 1))
;  ((3 4) (3 3) (3 2) (4 1))
;  ((4 4) (3 3) (3 2) (4 1))
;  ((1 4) (4 3) (3 2) (4 1))
;  ((2 4) (4 3) (3 2) (4 1))
;  ((3 4) (4 3) (3 2) (4 1))
;  ((4 4) (4 3) (3 2) (4 1))
;  ((1 4) (1 3) (4 2) (4 1))
;  ((2 4) (1 3) (4 2) (4 1))
;  ((3 4) (1 3) (4 2) (4 1))
;  ((4 4) (1 3) (4 2) (4 1))
;  ((1 4) (2 3) (4 2) (4 1))
;  ((2 4) (2 3) (4 2) (4 1))
;  ((3 4) (2 3) (4 2) (4 1))
;  ((4 4) (2 3) (4 2) (4 1))
;  ((1 4) (3 3) (4 2) (4 1))
;  ((2 4) (3 3) (4 2) (4 1))
;  ((3 4) (3 3) (4 2) (4 1))
;  ((4 4) (3 3) (4 2) (4 1))
;  ((1 4) (4 3) (4 2) (4 1))
;  ((2 4) (4 3) (4 2) (4 1))
;  ((3 4) (4 3) (4 2) (4 1))
;  ((4 4) (4 3) (4 2) (4 1)))

;
; Attemp to recreate the case (queens 4)
;

; Let's try to recreate 4 queens problem to see how to do the solution.
; Then, the current lines of the original code could be rewritten as
; board-size=4
; (enumerate-interval 1 board-size)='(1 2 3 4)

; First call to the procedure

;(queen 4)
;;It will trigger
;(queen-cols 4)

;;But (queen-cols 4) needs (queen-cools 3) and so on. 
;;Let's start with
;
;(queen-cols 0)
;
;;As k=0, it will trigger
;(list empty)
;
;(queen-cols 0)--->'(())
;

;;Let's move to the next one
;
;(queen-cols 1)
;

;;Auxiliary procedures

;(define (accumulate op initial sequence)
;  (if (null? sequence)
;      initial
;      (op (car sequence) (accumulate op initial (cdr sequence)))))
;
;(define (flatmap proc seq)
;  (accumulate append empty (map proc seq)))
;
;(define (adjoin-position row col rest)
;  (cons (list row col) rest))

;;(queen-cols 1) will trigger the following code

;(filter (lambda (positions) (safe? 1 positions))                 
;(flatmap (lambda (rest-of-queens)                   
;           (map (lambda (new-row) (adjoin-position new-row 1 rest-of-queens))
;                '(1 2 3 4))
;           ; To a current situation of positions of queens it is added every option for the new column
;           ; So, all the possible combinations of column 1 and new row (4) are generated
;           )
;         '(()))
; Since there is only the empty board, the resulting sequence after applying flatmap is
; '(((1 1)) ((2 1)) ((3 1)) ((4 1)))
;)

; So, for the filter function, the predicate is if its safe and que sequence is '(((1 1)) ((2 1)) ((3 1)) ((4 1)))
; All of them should be safe since there is not any danger
;
; (queen-cols 1) -> '(((1 1)) ((2 1)) ((3 1)) ((4 1))) 
;

;(queen-cols 2)

;(filter (lambda (positions) (safe? 2 positions))                 
;(flatmap (lambda (rest-of-queens)                   
;           (map (lambda (new-row) (adjoin-position new-row 2 rest-of-queens))
;                '(1 2 3 4)))
;         '(((1 1)) ((2 1)) ((3 1)) ((4 1))))
; After applying flatmap, using the result of (queen-cols 1), this is the sequence of positions that should be filtered
;'(((1 2) (1 1)) ((2 2) (1 1)) ((3 2) (1 1)) ((4 2) (1 1))
;                ((1 2) (2 1)) ((2 2) (2 1)) ((3 2) (2 1)) ((4 2) (2 1))
;                ((1 2) (3 1)) ((2 2) (3 1)) ((3 2) (3 1)) ((4 2) (3 1))
;                ((1 2) (4 1)) ((2 2) (4 1)) ((3 2) (4 1)) ((4 2) (4 1)))
;)

; Knowing the solution, the only elements that have to survive are
;'(((1 2) (3 1)) ((4 2) (2 1)))

;(define (safe? column positions) ; Note that we need only check whether the new queen is safe—the other queens are already guaranteed safe with respect to each other.

; By construction, it is known that the first position in a given sequence is the one of the last queen added, the one it is needed to check
  
; It will be apply safe? to (car sequence), i.e. , to ((1 2) (1 1))
; Conditions, if row=row, not

;
; Final version of the exercise
;

; Definition of adjoin-position

(define (adjoin-position new-row new-col rest-positions) ; adjoins a new row-column position to a set of positions
  (cons (list new-row new-col) rest-positions))

; Definition of safe?

(define (safe? newcol positions)
  ; Auxiliary procedure
  (define (length items)
    (if (null? items)
        0
        (+ 1 (length (cdr items)))))
  ;
  ; Beginning of the safe? procedure
  ;
  ; Because of construction, it is known that the new positions added have a new column different to the rest
  ; By construction, the position to check is the first one on the list 
  ; We need to check if we are in the same row or not and if we are in the dangerous diagonals
  (let ((newrow (caar positions)))
    ; It is stored the value of the row of the new queen position   
    (let ((listrows (filter (lambda (checked-queens) (not (= newrow (car checked-queens)))) (cdr positions)))
          ; With this filter we get a list with the already placed queens which are in a different row
          ; So, if the new position is in a correct row, then, the length of (cdr positions) must be the same of the filtered list
          ; because this means that all the placed queens are in a different row
          (listdiag (filter (lambda (checked-queens) (not (= (abs (- newrow (car checked-queens))) (abs (- newcol (cadr checked-queens)))))) (cdr positions))))
      ; With this filter we get a list with the already placed queens which are in a compatible position with respect of the new queen diagonalwisely     
      (and (= (length (cdr positions)) (length listrows)) (= (length (cdr positions)) (length listdiag))))))
;Finally, it is checked that the length of both lists is equal to the original one. If this is the case for both the rows and diagonals, this position is valid

(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        
        (list empty) ; empty board, represents an empty set of positions

        (filter

         (lambda (positions) (safe? k positions)) ; predicate for filter
                
         (flatmap

          (lambda (rest-of-queens)
                   
            (map

             (lambda (new-row) (adjoin-position new-row k rest-of-queens)) ; lambda function for map

             (enumerate-interval 1 board-size) ;sequence for map

             )) ; lambda function for flatmap
                         
          (queen-cols (- k 1)) ; sequence for flatmap
                 
          ) ; All the result from flatmap is que sequence for filter
                
         ) ; End of filter, which is the alternative to k=0
        
        ) ; End of if
    
    ) ; End of (queen-cols k)

  (queen-cols board-size) ; Call to queen-cols with the size of the board it is wanted to solve

  ) ; End of (queens board-size)

; Final comprobation

(length (queens 8)) ; 92! Great!

(queens 8)

;'(((4 8) (2 7) (7 6) (3 5) (6 4) (8 3) (5 2) (1 1))
;  ((5 8) (2 7) (4 6) (7 5) (3 4) (8 3) (6 2) (1 1))
;  ((3 8) (5 7) (2 6) (8 5) (6 4) (4 3) (7 2) (1 1))
;  ((3 8) (6 7) (4 6) (2 5) (8 4) (5 3) (7 2) (1 1))
;  ((5 8) (7 7) (1 6) (3 5) (8 4) (6 3) (4 2) (2 1))
;  ((4 8) (6 7) (8 6) (3 5) (1 4) (7 3) (5 2) (2 1))
;  ((3 8) (6 7) (8 6) (1 5) (4 4) (7 3) (5 2) (2 1))
;  ((5 8) (3 7) (8 6) (4 5) (7 4) (1 3) (6 2) (2 1))
;  ((5 8) (7 7) (4 6) (1 5) (3 4) (8 3) (6 2) (2 1))
;  ((4 8) (1 7) (5 6) (8 5) (6 4) (3 3) (7 2) (2 1))
;  ((3 8) (6 7) (4 6) (1 5) (8 4) (5 3) (7 2) (2 1))
;  ((4 8) (7 7) (5 6) (3 5) (1 4) (6 3) (8 2) (2 1))
;  ((6 8) (4 7) (2 6) (8 5) (5 4) (7 3) (1 2) (3 1))
;  ((6 8) (4 7) (7 6) (1 5) (8 4) (2 3) (5 2) (3 1))
;  ((1 8) (7 7) (4 6) (6 5) (8 4) (2 3) (5 2) (3 1))
;  ((6 8) (8 7) (2 6) (4 5) (1 4) (7 3) (5 2) (3 1))
;  ((6 8) (2 7) (7 6) (1 5) (4 4) (8 3) (5 2) (3 1))
;  ((4 8) (7 7) (1 6) (8 5) (5 4) (2 3) (6 2) (3 1))
;  ((5 8) (8 7) (4 6) (1 5) (7 4) (2 3) (6 2) (3 1))
;  ((4 8) (8 7) (1 6) (5 5) (7 4) (2 3) (6 2) (3 1))
;  ((2 8) (7 7) (5 6) (8 5) (1 4) (4 3) (6 2) (3 1))
;  ((1 8) (7 7) (5 6) (8 5) (2 4) (4 3) (6 2) (3 1))
;  ((2 8) (5 7) (7 6) (4 5) (1 4) (8 3) (6 2) (3 1))
;  ((4 8) (2 7) (7 6) (5 5) (1 4) (8 3) (6 2) (3 1))
;  ((5 8) (7 7) (1 6) (4 5) (2 4) (8 3) (6 2) (3 1))
;  ((6 8) (4 7) (1 6) (5 5) (8 4) (2 3) (7 2) (3 1))
;  ((5 8) (1 7) (4 6) (6 5) (8 4) (2 3) (7 2) (3 1))
;  ((5 8) (2 7) (6 6) (1 5) (7 4) (4 3) (8 2) (3 1))
;  ((6 8) (3 7) (7 6) (2 5) (8 4) (5 3) (1 2) (4 1))
;  ((2 8) (7 7) (3 6) (6 5) (8 4) (5 3) (1 2) (4 1))
;  ((7 8) (3 7) (1 6) (6 5) (8 4) (5 3) (2 2) (4 1))
;  ((5 8) (1 7) (8 6) (6 5) (3 4) (7 3) (2 2) (4 1))
;  ((1 8) (5 7) (8 6) (6 5) (3 4) (7 3) (2 2) (4 1))
;  ((3 8) (6 7) (8 6) (1 5) (5 4) (7 3) (2 2) (4 1))
;  ((6 8) (3 7) (1 6) (7 5) (5 4) (8 3) (2 2) (4 1))
;  ((7 8) (5 7) (3 6) (1 5) (6 4) (8 3) (2 2) (4 1))
;  ((7 8) (3 7) (8 6) (2 5) (5 4) (1 3) (6 2) (4 1))
;  ((5 8) (3 7) (1 6) (7 5) (2 4) (8 3) (6 2) (4 1))
;  ((2 8) (5 7) (7 6) (1 5) (3 4) (8 3) (6 2) (4 1))
;  ((3 8) (6 7) (2 6) (5 5) (8 4) (1 3) (7 2) (4 1))
;  ((6 8) (1 7) (5 6) (2 5) (8 4) (3 3) (7 2) (4 1))
;  ((8 8) (3 7) (1 6) (6 5) (2 4) (5 3) (7 2) (4 1))
;  ((2 8) (8 7) (6 6) (1 5) (3 4) (5 3) (7 2) (4 1))
;  ((5 8) (7 7) (2 6) (6 5) (3 4) (1 3) (8 2) (4 1))
;  ((3 8) (6 7) (2 6) (7 5) (5 4) (1 3) (8 2) (4 1))
;  ((6 8) (2 7) (7 6) (1 5) (3 4) (5 3) (8 2) (4 1))
;  ((3 8) (7 7) (2 6) (8 5) (6 4) (4 3) (1 2) (5 1))
;  ((6 8) (3 7) (7 6) (2 5) (4 4) (8 3) (1 2) (5 1))
;  ((4 8) (2 7) (7 6) (3 5) (6 4) (8 3) (1 2) (5 1))
;  ((7 8) (1 7) (3 6) (8 5) (6 4) (4 3) (2 2) (5 1))
;  ((1 8) (6 7) (8 6) (3 5) (7 4) (4 3) (2 2) (5 1))
;  ((3 8) (8 7) (4 6) (7 5) (1 4) (6 3) (2 2) (5 1))
;  ((6 8) (3 7) (7 6) (4 5) (1 4) (8 3) (2 2) (5 1))
;  ((7 8) (4 7) (2 6) (8 5) (6 4) (1 3) (3 2) (5 1))
;  ((4 8) (6 7) (8 6) (2 5) (7 4) (1 3) (3 2) (5 1))
;  ((2 8) (6 7) (1 6) (7 5) (4 4) (8 3) (3 2) (5 1))
;  ((2 8) (4 7) (6 6) (8 5) (3 4) (1 3) (7 2) (5 1))
;  ((3 8) (6 7) (8 6) (2 5) (4 4) (1 3) (7 2) (5 1))
;  ((6 8) (3 7) (1 6) (8 5) (4 4) (2 3) (7 2) (5 1))
;  ((8 8) (4 7) (1 6) (3 5) (6 4) (2 3) (7 2) (5 1))
;  ((4 8) (8 7) (1 6) (3 5) (6 4) (2 3) (7 2) (5 1))
;  ((2 8) (6 7) (8 6) (3 5) (1 4) (4 3) (7 2) (5 1))
;  ((7 8) (2 7) (6 6) (3 5) (1 4) (4 3) (8 2) (5 1))
;  ((3 8) (6 7) (2 6) (7 5) (1 4) (4 3) (8 2) (5 1))
;  ((4 8) (7 7) (3 6) (8 5) (2 4) (5 3) (1 2) (6 1))
;  ((4 8) (8 7) (5 6) (3 5) (1 4) (7 3) (2 2) (6 1))
;  ((3 8) (5 7) (8 6) (4 5) (1 4) (7 3) (2 2) (6 1))
;  ((4 8) (2 7) (8 6) (5 5) (7 4) (1 3) (3 2) (6 1))
;  ((5 8) (7 7) (2 6) (4 5) (8 4) (1 3) (3 2) (6 1))
;  ((7 8) (4 7) (2 6) (5 5) (8 4) (1 3) (3 2) (6 1))
;  ((8 8) (2 7) (4 6) (1 5) (7 4) (5 3) (3 2) (6 1))
;  ((7 8) (2 7) (4 6) (1 5) (8 4) (5 3) (3 2) (6 1))
;  ((5 8) (1 7) (8 6) (4 5) (2 4) (7 3) (3 2) (6 1))
;  ((4 8) (1 7) (5 6) (8 5) (2 4) (7 3) (3 2) (6 1))
;  ((5 8) (2 7) (8 6) (1 5) (4 4) (7 3) (3 2) (6 1))
;  ((3 8) (7 7) (2 6) (8 5) (5 4) (1 3) (4 2) (6 1))
;  ((3 8) (1 7) (7 6) (5 5) (8 4) (2 3) (4 2) (6 1))
;  ((8 8) (2 7) (5 6) (3 5) (1 4) (7 3) (4 2) (6 1))
;  ((3 8) (5 7) (2 6) (8 5) (1 4) (7 3) (4 2) (6 1))
;  ((3 8) (5 7) (7 6) (1 5) (4 4) (2 3) (8 2) (6 1))
;  ((5 8) (2 7) (4 6) (6 5) (8 4) (3 3) (1 2) (7 1))
;  ((6 8) (3 7) (5 6) (8 5) (1 4) (4 3) (2 2) (7 1))
;  ((5 8) (8 7) (4 6) (1 5) (3 4) (6 3) (2 2) (7 1))
;  ((4 8) (2 7) (5 6) (8 5) (6 4) (1 3) (3 2) (7 1))
;  ((4 8) (6 7) (1 6) (5 5) (2 4) (8 3) (3 2) (7 1))
;  ((6 8) (3 7) (1 6) (8 5) (5 4) (2 3) (4 2) (7 1))
;  ((5 8) (3 7) (1 6) (6 5) (8 4) (2 3) (4 2) (7 1))
;  ((4 8) (2 7) (8 6) (6 5) (1 4) (3 3) (5 2) (7 1))
;  ((6 8) (3 7) (5 6) (7 5) (1 4) (4 3) (2 2) (8 1))
;  ((6 8) (4 7) (7 6) (1 5) (3 4) (5 3) (2 2) (8 1))
;  ((4 8) (7 7) (5 6) (2 5) (6 4) (1 3) (3 2) (8 1))
;  ((5 8) (7 7) (2 6) (6 5) (3 4) (1 3) (4 2) (8 1)))
