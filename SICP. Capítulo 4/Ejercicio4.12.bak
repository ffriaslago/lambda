#lang sicp

; The original procedures are:

(define (lookup-variable-value var env) ; Arguments: the variable it has to look for and the environment
  
  (define (env-loop env)
    
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (car vals))
            (else (scan (cdr vars) (cdr vals)))))
    
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  
  (env-loop env))

(define (set-variable-value! var val env) ; Arguments: the variable, the new value and the environment. 
  
  (define (env-loop env)
    
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  
  (env-loop env))

(define (define-variable! var val env) ; Arguments: the name of the new variable, the value and the environment. 
  
  (let ((frame (first-frame env)))
    
    (define (scan vars vals)
      (cond ((null? vars)
             (add-binding-to-frame! var val frame))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    
    (scan (frame-variables frame)
          (frame-values frame))))

; Seeing the three of them, it can be concluded that all three have a scan procedure 